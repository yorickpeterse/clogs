import std.cmp.Equal

impl Array if T: Equal[T] {
  fn pub index_of(value: ref T) -> Option[Int] {
    let mut idx = 0

    while idx < @size {
      if get(idx) == value { return Option.Some(idx) }
      idx += 1
    }

    Option.None
  }
}

impl String {
  fn pub replace(string: String, with: String) -> String {
    let idx = match byte_index(string, starting_at: 0) {
      case Some(v) -> v
      case _ -> return self
    }

    let new = slice(start: 0, size: idx)

    new.append(with.to_byte_array)
    new.append(slice(start: idx + string.size, size: size))
    new.into_string
  }
}

impl Bool {
  fn pub then[T](func: fn -> T) -> Option[T] {
    if self { Option.Some(func.call) } else { Option.None }
  }
}
